// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/22/2023 14:45:21"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          debouncer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module debouncer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg asyncReset;
reg clock;
reg fpgaClock;
reg selectAscDesc;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire e;
wire f;
wire g;

// assign statements (if any)                          
debouncer i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.asyncReset(asyncReset),
	.b(b),
	.c(c),
	.clock(clock),
	.d(d),
	.e(e),
	.f(f),
	.fpgaClock(fpgaClock),
	.g(g),
	.selectAscDesc(selectAscDesc)
);
initial 
begin 
#1000000 $finish;
end 

// clock
initial
begin
	repeat(12)
	begin
		clock = 1'b0;
		clock = #40000 1'b1;
		# 40000;
	end
	clock = 1'b0;
end 

// fpgaClock
always
begin
	fpgaClock = 1'b0;
	fpgaClock = #10000 1'b1;
	#10000;
end 

// asyncReset
initial
begin
	asyncReset = 1'b0;
end 

// selectAscDesc
initial
begin
	selectAscDesc = 1'b0;
end 
endmodule

