// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/24/2023 17:55:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          multiplier
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module multiplier_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a0;
reg a1;
reg a2;
reg a3;
reg b0;
reg b1;
reg b2;
reg b3;
// wires                                               
wire p0;
wire p1;
wire p2;
wire p3;
wire p4;
wire p5;
wire p6;
wire p7;

// assign statements (if any)                          
multiplier i1 (
// port map - connection between master ports and signals/registers   
	.a0(a0),
	.a1(a1),
	.a2(a2),
	.a3(a3),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.p0(p0),
	.p1(p1),
	.p2(p2),
	.p3(p3),
	.p4(p4),
	.p5(p5),
	.p6(p6),
	.p7(p7)
);
initial 
begin 
#1000000 $finish;
end 

// a0
initial
begin
	a0 = 1'b0;
end 

// a1
initial
begin
	a1 = 1'b1;
end 

// a2
initial
begin
	a2 = 1'b0;
end 

// a3
initial
begin
	a3 = 1'b0;
end 

// b0
initial
begin
	b0 = 1'b0;
end 

// b1
initial
begin
	b1 = 1'b1;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
end 
endmodule

